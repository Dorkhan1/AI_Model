import os
import streamlit as st
from openai import OpenAI
from datetime import datetime
from gtts import gTTS
from io import BytesIO

secret_token = os.getenv("SECRET_TOKEN")
if secret_token is None:
    from dotenv import load_dotenv
    load_dotenv()
    secret_token = os.getenv("SECRET_TOKEN")

if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    st.set_page_config(page_title="üç≤ AI-–∏–Ω—Ç–µ—Ä–≤—å—é", page_icon="üç≤")
    st.markdown("## üîê –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞")

    with st.form("auth_form"):
        user_token = st.text_input("–¢–æ–∫–µ–Ω", type="password")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")

    if submitted:
        if user_token == secret_token:
            st.session_state.authenticated = True
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    st.stop()

api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

labels = {
    "title": "üç≤ AI-–∏–Ω—Ç–µ—Ä–≤—å—é: –°–µ–º–µ–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏",
    "start_msg": "üß† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞, –∏ —è —Å–æ—Å—Ç–∞–≤–ª—é –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é",
    "generate_btn": "‚úçÔ∏è –°–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
    "download_btn": "üìÑ –°–∫–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
    "audio_btn": "üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ",
    "result_title": "üìñ –°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:",
    "spinner": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏..."
}

def generate_questions():
    prompt = (
        "–ü—Ä–∏–¥—É–º–∞–π 3 —Ç—ë–ø–ª—ã—Ö –∏ –ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –æ —Å–µ–º–µ–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö, —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö. "
        "–û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞. –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."
    )
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä, —Å–æ–±–∏—Ä–∞—é—â–∏–π —Å–µ–º–µ–π–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ä–µ—Ü–µ–ø—Ç—ã."},
            {"role": "user", "content": prompt}
        ]
    )
    raw_text = response.choices[0].message.content
    questions = [q.strip("‚Ä¢-1234567890. ").strip() for q in raw_text.split("\n") if q.strip()]
    return questions[:3]

def generate_audio(text, lang="ru"):
    tts = gTTS(text=text, lang=lang)
    audio_data = BytesIO()
    tts.write_to_fp(audio_data)
    audio_data.seek(0)
    return audio_data

# –°–æ—Å—Ç–æ—è–Ω–∏—è
if "step" not in st.session_state:
    st.session_state.step = 0
if "questions" not in st.session_state:
    st.session_state.questions = generate_questions()
if "answers" not in st.session_state:
    st.session_state.answers = []
if "story" not in st.session_state:
    st.session_state.story = None

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title(labels["title"])
st.info(labels["start_msg"])

if st.session_state.step < len(st.session_state.questions):
    question = st.session_state.questions[st.session_state.step]
    answer = st.text_input(f"ü§ñ –í–æ–ø—Ä–æ—Å {st.session_state.step + 1}: {question}", key=f"answer_{st.session_state.step}")
    if st.button("–û—Ç–≤–µ—Ç–∏—Ç—å"):
        if answer.strip():
            st.session_state.answers.append(answer)
            st.session_state.step += 1
            st.experimental_rerun()
        else:
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç.")

elif st.session_state.story is None:
    interview_text = "\n".join([f"Q: {q}\nA: {a}" for q, a in zip(st.session_state.questions, st.session_state.answers)])
    story_prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞–ø–∏—à–∏ —Ç—ë–ø–ª—É—é —Å–µ–º–µ–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (3‚Äì5 –∞–±–∑–∞—Ü–µ–≤), "
        "—Å–æ—Ö—Ä–∞–Ω–∏–≤ —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –∏ –Ω–µ –¥–æ–±–∞–≤–ª—è—è –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–º–∏–ª–∏–π.\n\n" + interview_text
    )
    with st.spinner(labels["spinner"]):
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–∏—Å–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–µ–º–µ–π–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏."},
                {"role": "user", "content": story_prompt}
            ]
        )
        st.session_state.story = response.choices[0].message.content
        st.success("‚úÖ –ì–æ—Ç–æ–≤–æ!")
        st.experimental_rerun()
else:
    st.markdown(f"### {labels['result_title']}")
    st.write(st.session_state.story)

    audio_file = generate_audio(st.session_state.story)
    st.audio(audio_file, format="audio/mp3")
    st.download_button(labels["audio_btn"], data=audio_file, file_name="family_story.mp3", mime="audio/mp3")

    filename = f"family_story_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    st.download_button(labels["download_btn"], data=st.session_state.story, file_name=filename, mime="text/plain")
