import os
import streamlit as st
from openai import OpenAI
from datetime import datetime
from gtts import gTTS
from io import BytesIO
from dotenv import load_dotenv

load_dotenv()

st.set_page_config(page_title="AI-–∏–Ω—Ç–µ—Ä–≤—å—é", page_icon="üç≤")

secret_token = os.getenv("SECRET_TOKEN")
if "authenticated" not in st.session_state:
    st.session_state.authenticated = False

if not st.session_state.authenticated:
    st.markdown("## üîê –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞")
    with st.form("auth_form"):
        user_token = st.text_input("–¢–æ–∫–µ–Ω", type="password")
        submitted = st.form_submit_button("–í–æ–π—Ç–∏")
    if submitted:
        if user_token == secret_token:
            st.session_state.authenticated = True
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
    st.stop()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

st.title("AI-–∏–Ω—Ç–µ—Ä–≤—å—é: –°–µ–º–µ–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è")
st.info("üß† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Ç—Ä–∏ –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é!")

def generate_questions():
    prompt = (
        "–ü—Ä–∏–¥—É–º–∞–π 3 –ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –æ —Å–µ–º–µ–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö, —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö. "
        "–û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞. –ë–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
    )
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢—ã –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä."},
            {"role": "user", "content": prompt}
        ]
    )
    text = response.choices[0].message.content
    return [q.strip("‚Ä¢-1234567890. ").strip() for q in text.split("\n") if q.strip()][:3]

# –î–∏–∞–ª–æ–≥–æ–≤–∞—è –ø–∞–º—è—Ç—å
if "messages" not in st.session_state:
    st.session_state.messages = []
if "questions" not in st.session_state:
    st.session_state.questions = generate_questions()
if "question_index" not in st.session_state:
    st.session_state.question_index = 0

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])

# –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
if st.session_state.question_index < len(st.session_state.questions):
    question = st.session_state.questions[st.session_state.question_index]
    with st.chat_message("ai"):
        st.markdown(question)

    user_input = st.chat_input("–í–∞—à –æ—Ç–≤–µ—Ç...")

    st.markdown("#### –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª (.mp3, .wav, .m4a):")
    audio_file = st.file_uploader("üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç", type=["mp3", "wav", "m4a"])

    recognized_text = None

    if user_input:
        recognized_text = user_input
    elif audio_file:
        with st.spinner("üéß –†–∞—Å–ø–æ–∑–Ω–∞—ë—Ç—Å—è –≥–æ–ª–æ—Å..."):
            try:
                audio_bytes = audio_file.read()
                transcript = client.audio.transcriptions.create(
                    model="whisper-1",
                    file=BytesIO(audio_bytes),
                    filename=audio_file.name,
                    response_format="text"
                )
                recognized_text = transcript.strip()
                st.success(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {recognized_text}")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {e}")

    if recognized_text:
        st.session_state.messages.append({"role": "ai", "content": question})
        st.session_state.messages.append({"role": "user", "content": recognized_text})
        st.session_state.question_index += 1
        st.rerun()

if st.session_state.question_index == len(st.session_state.questions):
    if st.button("‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–º–µ–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é"):
        full_dialogue = "\n".join(
            [f"Q: {m['content']}" if m['role'] == "ai" else f"A: {m['content']}"
             for m in st.session_state.messages]
        )
        story_prompt = (
            "–ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–ø–∏—à–∏ —Ç—ë–ø–ª—É—é —Å–µ–º–µ–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (3‚Äì5 –∞–±–∑–∞—Ü–µ–≤), "
            "—Å–æ—Ö—Ä–∞–Ω–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –∏ –ª–∏—á–Ω—ã–µ –¥–µ—Ç–∞–ª–∏."
        )
        with st.spinner("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞—ë—Ç—Å—è..."):
            try:
                response = client.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=[
                        {"role": "system", "content": "–¢—ã –ø–∏—Å–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏."},
                        {"role": "user", "content": story_prompt + "\n\n" + full_dialogue}
                    ]
                )
                story = response.choices[0].message.content
                st.session_state.story = story
                st.success("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞!")
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

if "story" in st.session_state:
    st.markdown("### üìñ –°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è")
    st.write(st.session_state.story)

    def generate_audio(text):
        tts = gTTS(text=text, lang="ru")
        audio_data = BytesIO()
        tts.write_to_fp(audio_data)
        audio_data.seek(0)
        return audio_data

    audio_file = generate_audio(st.session_state.story)
    st.audio(audio_file, format="audio/mp3")
    st.download_button("üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ", data=audio_file, file_name="family_story.mp3", mime="audio/mp3")

    filename = f"family_story_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    st.download_button("üìÑ –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç", data=st.session_state.story, file_name=filename, mime="text/plain")