import os
import streamlit as st
from dotenv import load_dotenv
from openai import OpenAI
from datetime import datetime
from gtts import gTTS
from io import BytesIO


st.set_page_config(page_title="üç≤ AI-–∏–Ω—Ç–µ—Ä–≤—å—é", page_icon="üç≤")

load_dotenv()
SECRET_TOKEN = os.getenv("SECRET_TOKEN")

st.markdown("## üîê –í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞")
user_token = st.text_input("–¢–æ–∫–µ–Ω", type="password")

if user_token != SECRET_TOKEN:
    st.warning("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞.")
    st.stop()


load_dotenv()
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))


labels = {
    "title": "üç≤ AI-–∏–Ω—Ç–µ—Ä–≤—å—é: –°–µ–º–µ–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏",
    "start_msg": "üß† –Ø –∑–∞–¥–∞–º —Ç–µ–±–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤. –û—Ç–≤–µ—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ!",
    "generate_btn": "‚úçÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é",
    "download_btn": "üìÑ –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç –∏—Å—Ç–æ—Ä–∏–∏",
    "result_title": "üìñ –°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è:",
    "spinner": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏...",
    "audio_title": "üéß –ê—É–¥–∏–æ–≤–µ—Ä—Å–∏—è –∏—Å—Ç–æ—Ä–∏–∏",
    "audio_caption": "‚ö†Ô∏è –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚Äî —Å–∫–∞—á–∞–π—Ç–µ –∞—É–¥–∏–æ –Ω–∏–∂–µ. –§–∞–π–ª –±–µ–∑–æ–ø–∞—Å–µ–Ω –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ.",
    "audio_download": "üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ"
}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
def generate_questions():
    prompt = (
        "–ü—Ä–∏–¥—É–º–∞–π 5 —Ç—ë–ø–ª—ã—Ö –∏ –ª–∏—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤—å—é –æ —Å–µ–º–µ–π–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–∞—Ö, —Ç—Ä–∞–¥–∏—Ü–∏—è—Ö –∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö. "
        "–í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏. –û–¥–∏–Ω –≤–æ–ø—Ä–æ—Å ‚Äî –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞. –ë–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞."
    )
    system_msg = "–¢—ã –∏–Ω—Ç–µ—Ä–≤—å—é–µ—Ä, —Å–æ–±–∏—Ä–∞—é—â–∏–π –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Å–µ–º–µ–π–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏."

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": system_msg},
            {"role": "user", "content": prompt}
        ]
    )

    raw_text = response.choices[0].message.content
    questions = [q.strip("‚Ä¢-1234567890. ").strip() for q in raw_text.split("\n") if q.strip()]
    return questions[:5]


def generate_audio(text):
    tts = gTTS(text=text, lang="ru")
    audio_data = BytesIO()
    tts.write_to_fp(audio_data)
    audio_data.seek(0)
    return audio_data


st.title(labels["title"])
st.info(labels["start_msg"])

if "questions" not in st.session_state:
    st.session_state.questions = generate_questions()
    st.session_state.answers = [""] * len(st.session_state.questions)

for i, q in enumerate(st.session_state.questions):
    st.session_state.answers[i] = st.text_area(f"ü§ñ –í–æ–ø—Ä–æ—Å {i+1}: {q}", value=st.session_state.answers[i])


if st.button(labels["generate_btn"]):
    interview_text = "\n".join([f"Q: {q}\nA: {a}" for q, a in zip(st.session_state.questions, st.session_state.answers)])
    story_prompt = (
        "–ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞–ø–∏—à–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—É—é –∏ —Ç—ë–ø–ª—É—é —Å–µ–º–µ–π–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (3‚Äì5 –∞–±–∑–∞—Ü–µ–≤), "
        "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥ –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤, –Ω–µ –¥–æ–±–∞–≤–ª—è—è –≤—ã–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–º–∏–ª–∏–π.\n\n" + interview_text
    )
    system_msg = "–¢—ã –ø–∏—Å–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–µ —Å–µ–º–µ–π–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏."

    with st.spinner(labels["spinner"]):
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_msg},
                {"role": "user", "content": story_prompt}
            ]
        )
        st.session_state["story"] = response.choices[0].message.content
        st.success("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –≥–æ—Ç–æ–≤–∞!")

if "story" in st.session_state:
    st.markdown(f"### {labels['result_title']}")
    st.write(st.session_state["story"])


    audio_file = generate_audio(st.session_state["story"])

    # UI —Å –∞—É–¥–∏–æ
    st.markdown(f"### {labels['audio_title']}")
    st.audio(audio_file, format="audio/mp3")
    st.caption(labels["audio_caption"])

    st.download_button(
        label=labels["audio_download"],
        data=audio_file,
        file_name="family_story.mp3",
        mime="audio/mp3"
    )

    filename = f"family_story_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    st.download_button(
        label=labels["download_btn"],
        data=st.session_state["story"],
        file_name=filename,
        mime="text/plain"
    )